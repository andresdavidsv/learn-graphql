"Validate Levels"
enum Level{
  beginner
  intermate
  advanced
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String @deprecated
  people: [Student]
  level: Level
}

interface Person{
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Return All courses"
  getCourses: [Course]
  "Return one Course"
  getCourse(id: ID!): Course
  "Return All students"
  getPeople: [Person]
  "Return one Student"
  getPerson(id: ID!): Person
  "Global Search"
  searchItems(keyword: String!): [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}
input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation{
  "Create a course"
  createCourse(input: CourseInput!): Course
  "Edit a course"
  editCourse(_id:ID!, input: CourseEditInput): Course
  "Delete a course"
  deleteCourse(_id: ID!): Boolean
  "Create a Person"
  createPerson(input: PersonInput!): Person
  "Edit a Person"
  editPerson(_id: ID!, input: PersonEditInput): Person
  "Delete a Person"
  deletePerson(_id: ID!): Boolean
  "Add a person to one Course"
  addPeople(courseID: ID!, personID: ID!): Course
}
